#summary General settings
#labels Featured
==Usage==

Simply include the plugin after jQuery, it loads all the necessary stuff from Google. Or you can load the jsapi.js or the language API too before, they won't be loaded again. You can also include the copyEvents plugin because if an HTML tag has text and other child nodes at the same level than its innerHTML will be translated and replaced. If you don't use livequery and attached event handlers with jQuery they need to be copied to the new elements.

In most cases you can use the plugin inside $(document).ready() but since v1.1.2 you can define a callback function to be executed when the Language API is loaded. After the plugin loads it checks for 30 seconds if $.translate.ready is a function. Until this time you can define a function which will be executed after the Language API is loaded:
{{{
$.translate.ready=function(){
  console.log('Language API is loaded');
  $(document).ready(function(){ //important! 
    $('body').translate('en');
  })
}
}}}

==Methods available inside callback functions (v1.1+)==

 * this.stop()
   * stops the translation
 * this.getLanguage(langCode, format)
   * returns the name of the language based on the language code
   * format can be: 'lowercase', 'uppercase', 'capitalize' (default is uppercase)
 * this.getLanguages(translatable) (v1.1.2+)
   * returns the google.language.Languages object (the available languages)
   * if the first argument is true it returns only the translatable languages

You can use these after the $.translate() and $.language() functions as they return the same object to which `this` refers to inside callback functions (v1.1.2+). The jQuery methods return a jQuery object so these can't be used after them.

==Some sites using this plugin==

 * [http://www.texasonline.com www.texasonline.com]
 * [http://www.mediamonkey.com www.mediamonkey.com]
 * [http://canto.extra.hu/site/query.php?lang=en&id=arrivein canto.extra.hu]

If you have questions or any ideas feel free to write here or send a mail.