#summary General settings
#labels Featured

There were some important changes in v1.2, please _read the release notes_ included. The documentation will be updated later.
Most important: `$.translate.ready=function(){ ... }` won't work, use  $.translate*()*.ready*(*function(){ ... }*)* instead.

==Usage==

Simply include the plugin after jQuery, it loads all the necessary stuff from Google. Or you can load the jsapi.js or the language API too before, they won't be loaded again.

You don't have to include the copyEvents plugin anymore(v1.1.5+): a similar function is included for rebinding event handlers because if an HTML tag has text and other child nodes at the same level than its innerHTML will be translated and replaced. If you attached event handlers with jQuery they will be copied to the new elements.

In most cases you can use the plugin inside $(document).ready() but since v1.1.2 you can define a callback function to be executed when the Language API is loaded. After the plugin loads it checks for 30 seconds if $.translate.ready is a function. Until this time you can define a function which will be executed after the Language API is loaded:
{{{
$(document).ready(function(){
  $.translate.ready=function(){
    //console.log('Language API is loaded');
    $('body').translate('en');
  }
})
}}}

==Methods available inside callback functions (v1.1+)==

 * this.stop()
   * stops the translation
 * this.getLanguage(langCode, format)
   * returns the name of the language based on the language code
   * format can be: 'lowercase', 'uppercase', 'capitalize' (default is uppercase)
 * this.getLanguages(translatable) (v1.1.2+)
   * returns the google.language.Languages object (the available languages)
   * if the first argument is true it returns only the translatable languages

You can use these after the $.translate() and $.language() functions as they return the same object to which `this` refers to inside callback functions (v1.1.2+). The jQuery methods return a jQuery object so these can't be used after them. (Like: `$.translate().getLanguages(true)` or `$.language().getLanguage('en', 'capitalize')`)

==How it works?==

 # Gathers all nodes that contain text ( if a node has text and other child nodes at the same level than its innerHTML will be translated).
 # Serializes the array of extracted texts (puts each one in a div to simulete array functionality).
 # Splits this string into smaller segments (the character limit is 500 per request), so that no sentences or html tags will be broken.
 # Starts translating these segments.
 # If a `div` (that stands for an item of the 'array') is completely translated it will be inserted to the doocument (then the `each` callback fires).
 # If some html elements got replaced (not just their textnodes) then it rebinds event handlers attached to them (but won't replace script elements).

==Why use it?==

 * Safely reduces the number of AJAX API calls (by about 20-40%) compared to translating only innerHTML.
 * You can translate an array of strings and the results are returned faster, don't have to wait for all the elements.
 * Don't have to exactly specify what to translate, just container elements (like `$('body').translate('de')`).
 * Simple jQuery-stlye syntax, automatic event rebinding, `start, each, complete, error, timeout` callback functions and other options.
 * Ability to stop a translation, convenience methods for getting available/translatable languages or getting the language from language code.
 * And of course you don't have to get around the 500 character limit.


==Some sites using this plugin==

 * [http://www.texasonline.com www.texasonline.com]
 * [http://canto.extra.hu/site/query.php?lang=en&id=arrivein canto.extra.hu]

If you have questions or any ideas feel free to write here or send a mail.